(()=>{"use strict";const d={count:0,errorCount:0,elapsedTime:0,sqlTime:0,fetchTime:0,txcallTime:0,cpuTime:0,maxElapsedTime:0,lastElapsedTime:0,startTime:Number.MAX_VALUE,lastTime:0},n=(T,i,c=[])=>Object.freeze(Object.values(T.reduce((a,s)=>{const t=s.sid,l=s[i];if(l==="")return a;const r=c.length>0?Object.assign(...c.map(m=>({[m]:s[m]}))):{},e=a[l]??{txidArrayBySid:{},...d,...r};return e.startTime>s.collectTime&&(e.startTime=s.collectTime),e.lastTime<s.collectTime&&(e.lastTime=s.collectTime,e.lastElapsedTime=s.elapsedTime),e.maxElapsedTime<s.elapsedTime&&(e.maxElapsedTime=s.elapsedTime),e.txidArrayBySid[t]=e.txidArrayBySid[t]??[],e.txidArrayBySid[t].push(s.txid),e.count++,e.elapsedTime+=s.elapsedTime,e.sqlTime+=s.sqlTime,e.cpuTime+=s.cpuTime,e.fetchTime+=s.fetchTime,e.txcallTime+=s.txcallTime,s.errCode!==0&&e.errorCount++,a[l]=e,a},{})).map(a=>(a.averageElapsedTime=a.elapsedTime/a.count,a.averageSqlTime=a.sqlTime/a.count,a.averageCpuTime=a.cpuTime/a.count,a.averageFetchTime=a.fetchTime/a.count,a.averageTxcallTime=a.txcallTime/a.count,a)).sort((a,s)=>s.count-a.count));self.onmessage=async({data:T})=>{const{chartSort:i,filteredTransactions:c}=T,a=n(c,"serviceHash",["serviceHash","serviceName"]),s=i==="ascByName"||i==="descByName",t=s?"count":i,l=a.reduce((e,m)=>(e+=m[t],e),0);let r=a.map((e,m)=>({...e,index:m,name:e.serviceName,value:e[t],rate:e[t]/l,seq:m}));s?i==="ascByName"?r=r.sort((e,m)=>e.name<m.name?-1:e.name>m.name?1:0):r=r.sort((e,m)=>e.name>m.name?-1:e.name>m.name?1:0):r=r.sort((e,m)=>m[t]-e[t]),self.postMessage(r)}})();
