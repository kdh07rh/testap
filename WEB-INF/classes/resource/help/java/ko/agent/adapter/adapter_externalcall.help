외부 트랜잭션이 호출 될 때 사용자 정의 타입과 외부 트랜잭션명을 변경할 때 사용한다.

** 인터페이스 설명 **

    package aries.runtime;

    public interface IAdapterExternalCall {
        /**
         * 외부 트랜잭션의 기본 네이밍 설정을 수정하고 싶은 경우에 사용한다.
         * 기본적으로 클래스 이름과 파라미터가 있는 경우 첫번째 파라미터를 '+' 연결한다.
         * 
         * @param classMethod  Class + Method 이름
         * @param parameterWrapper 메소드의 파라미터를 정보를 가지고 있는 클래스
         * @return ExternalCall 이름을 반환한다.
         */
        String getName(String classMethod, ParameterWrapper parameterWrapper);
        
        /**
         * 이미 등록되어 있는 타입 이외의 외부 트랜잭션의 타입을 지정한다. 기본 값은 CUSTOM 으로 되어 있다.
         * 
         * @param classMethod  Class + Method 이름
         * @param parameterWrapper 메소드의 파라미터를 정보를 가지고 있는 클래스
         * @return ExternalCall 타입을 반환한다.
         */
        byte getType(String classMethod, ParameterWrapper parameterWrapper);
        
        /**
         * 파라미터를 기반으로 기본 네이밍을 변경 하고 싶을 경우 사용한다.
         *
         * @param classMethod  Class + Method 이름
         * @param parameterWrapper 메소드의 파라미터를 정보를 가지고 있는 클래스
         * @return ExternalCall 이름을 반환한다.
         */
        String changeNameByParameter(String classMethod, ParameterWrapper parameterWrapper);
        
        /**
         * 반환값을 기반으로 기본 네이밍을 변경 하고 싶을 경우 사용한다.
         * 
         * @param classMethod  Class + Method 이름
         * @param returnValue 메소드의 리턴 값
         * @return ExternalCall 이름을 반환한다.
         */
        String changeNameByReturn(String classMethod, Object returnValue);
        
        /**
         * 기본 구현은 append 정보로 full descriptor 가 넘어와 '+' 기호와 함께 이미 설정된 서비스 이름 뒤에 지정된 값을 추가로 설정한다.
         * 이 내용을 변경하고 싶을 경우 사용한다.
         * 
         * @param name  이미 설정된 ExternalCall 이름
         * @param append  이미 설정된 이름에 추가할 값
         * @return ExternalCall 이름을 반환한다.
         */        
        String appendName(String name, String append);
        
        /**
         * 기본적으로 appendName(String name, String append) 와 동일 하고 추가 정보로 파라미터 정보들이 넘어 온다.
         * 
         * @param name  이미 설정된 ExternalCall 이름
         * @param classMethod  Class + Method 이름
         * @param parameterWrapper 메소드의 파라미터를 정보를 가지고 있는 클래스
         * @return ExternalCall 이름을 반환한다.
         */        
        String appendNameByParameter(String name, String classMethod, ParameterWrapper parameterWrapper);
        
        /**
         * 기본적으로 appendName(String name, String append) 와 동일 하고 추가 정보로 리턴값이 넘어 온다.
         * 
         * @param name  이미 설정된 ExternalCall 이름
         * @param classMethod  Class + Method 이름
         * @param returnValue 메소드의 리턴 값
         * @return ExternalCall 이름을 반환한다.
         */        
        String appendNameByReturn(String name, String classMethod, Object returnValue);
        
        /**
         * 외부 트랜잭션 수행중 발생하는 예외에 대한 처리를 추가 하고 싶을 경우 사용한다.
         * 기본으로는 toString() 값을 이용하여 사용자에게 예외를 보여준다.
         * 
         * @param returnValue 메소드의 리턴 값
         * @param stat 프로파일 메소드 정보
         * @param throwable 메소드 실행시 예외가 발생했을 경우 해당 예외
         */
        String catchException(Object returnValue, Object stat, Throwable throwable);
    }

- - -

**주요 객체의 메소드 설명**

###### ParameterWrapper 객체
    public int size() : 파라미터 개수를 리턴한다.
    public Object getThis() : 파라미터를 수집한 메소드의 객체를 반환한다.
    public Object[] getValues() : 메소드의 파라미터 배열을 반환한다.
    public Object get(int idx) : 해당 위치의 파라미터를 반환한다.
    public Parameter getParameter() : 원본 Parameter 객체를 반환한다.

- - -

**설정방법**

어댑터를 구현한 클래스를 jennifer.impl.XXX.jar 형태로 jennifer.jar 와 동일한 위치에 놓으면 별도의 설정 없이 해당 라이브러리를 자동으로 인식한다.
버전관리를 위해서 jennifer.impl.custom-1.0.1.jar 와 같은 형식을 사용하면 편리하다.

라이브러리 추가후 옵션에 구현한 어댑터 클래스 명을 등록하면 된다.

    ex) aries.runtime.custom.SampleExternalCall

- - -

**예제**

    public class SampleExternalCall extends AbstractDefaultAdapter implements IAdapterExternalCall
    {
        public String getName(String classMethod, ParameterWrapper parameterWrapper)
        {
            if (parameterWrapper != null && parameterWrapper.getParameter().getFirstString() != null)
            {
                return classMethod + '+' + parameterWrapper.getParameter().getFirstString();
            }

            return classMethod;
        }

        public String changeNameByParameter(String classMethod, ParameterWrapper parameterWrapper)
        {
            return order(classMethod, parameterWrapper);
        }

        public String changeNameByReturn(String classMethod, Object returnValue)
        {
            if (returnValue != null && returnValue instanceof String)
            {
                return (String) returnValue;
            }

            return removeDummyText(classMethod, BCI_TYPE.EXTERNAL_CALL_NAMING_RETURN.getType());
        }

        public String appendName(String name, String append)
        {
            return name + '+' + append;
        }

        public String appendNameByParameter(String name, String append, ParameterWrapper parameterWrapper)
        {
            return name + '+' + order(append, parameterWrapper);
        }

        public String appendNameByReturn(String name, String append, Object returnValue)
        {
            return name + '+' + returnValue;
        }

        public String catchException(Object rtn, Object stat, Throwable throwable)
        {
            return null;
        }

        public byte getType(String classMethod, ParameterWrapper parameterWrapper)
        {
            return RemoteCallTypeDef.CUSTOM;
        }

---

* 기본값 : 없음
* 형식 : 문자열
* 샘플값 : aries.runtime.custom.SampleExternalCall
* 재시작 : 안함
* 연관 옵션
    * [enable_externalcall_exception_event](./agentHelp?key=enable_externalcall_exception_event&type=1)
* 지원 버전 : 5.0.0